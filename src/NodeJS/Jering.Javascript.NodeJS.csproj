<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;net461</TargetFrameworks>
        <TargetFrameworks Condition="'$(OS)' != 'Windows_NT'">netstandard2.0</TargetFrameworks>
        <PackageId>Jering.Javascript.NodeJS</PackageId>
        <Authors>JeremyTCD</Authors>
        <Title>Invoke Javascript in NodeJS, from C#</Title>
        <Description>Jering.Javascript.NodeJS enables you to invoke javascript in NodeJS, from C#. With this ability, you can use javascript libraries and scripts from your C# projects.</Description>
        <Copyright>© 2018-2019 Jering. All rights reserved.</Copyright>
        <PackageProjectUrl>https://www.jering.tech/utilities/jering.javascript.nodejs/index</PackageProjectUrl>
        <RepositoryUrl>https://github.com/JeringTech/Javascript.NodeJS</RepositoryUrl>
        <PackageLicenseUrl>$(RepositoryUrl)/blob/master/License.md</PackageLicenseUrl>
        <PackageReleaseNotes>$(RepositoryUrl)/blob/master/Changelog.md</PackageReleaseNotes>
        <PackageTags>javascript nodejs</PackageTags>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
        <RepositoryType>git</RepositoryType>
        <LangVersion>7.3</LangVersion>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <PackageIconUrl>https://raw.githubusercontent.com/JeringTech/Javascript.NodeJS/master/nuget_icon.png</PackageIconUrl>
        <CodeAnalysisRuleSet>../../Jering.Javascript.NodeJS.ruleset</CodeAnalysisRuleSet>
        <HttpServerBundleName>HttpServer.js</HttpServerBundleName>
        <!-- Exclude Javascript\bin and Javascript\node_modules from project - https://github.com/dotnet/cli/issues/7525 -->
        <DefaultItemExcludes>Javascript\bin\**;Javascript\node_modules\**;$(DefaultItemExcludes)</DefaultItemExcludes>
        <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
        <AssemblyOriginatorKeyFile>../../keypair.snk</AssemblyOriginatorKeyFile>
        <SignAssembly>true</SignAssembly>
        <PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
    </PropertyGroup>

    <ItemGroup>
        <JavascriptInputs Include="Javascript\**" Exclude="$(DefaultItemExcludes)" />
        <!-- TODO if there are multiple outputs, e.g tcp server -->
        <JavascriptOutputs Include="Javascript\bin\$(Configuration)\$(HttpServerBundleName)" />
        <!-- If any file in JavascriptInputs has changed, fast up-to-date check must indicate that a rebuild is required - https://github.com/dotnet/project-system/pull/2241 -->
        <UpToDateCheckInput Include="@(JavascriptInputs)" />
        <!-- TODO if there are multiple outputs, e.g tcp server -->
        <EmbeddedResource Include="@(JavascriptOutputs)" LogicalName="$(HttpServerBundleName)" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Jering.IocServices.System.Net.Http" Version="0.4.0" />
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0-beta2-19554-01">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Roslynator.Analyzers" Version="2.2.0" PrivateAssets="all" ExcludeAssets="Runtime">
            <IncludeAssets>build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Roslynator.CodeFixes" Version="2.0.0" PrivateAssets="all" ExcludeAssets="Runtime">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Yarn.MSBuild" Version="1.16.0" PrivateAssets="all" ExcludeAssets="Runtime">
            <IncludeAssets>compile; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="System.Text.Json" Version="4.6.0" />
        <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="2.1.0" />
        <PackageReference Include="Microsoft.Extensions.Logging" Version="2.1.0" />
        <PackageReference Include="Microsoft.Extensions.Options" Version="2.1.0" />
    </ItemGroup>

    <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
        <PackageReference Include="Microsoft.AspNetCore.Hosting.Abstractions" Version="2.1.0" />
    </ItemGroup>
    <ItemGroup>
        <Compile Update="Strings.Designer.cs">
            <DesignTime>True</DesignTime>
            <AutoGen>True</AutoGen>
            <DependentUpon>Strings.resx</DependentUpon>
        </Compile>
    </ItemGroup>

    <ItemGroup>
        <EmbeddedResource Update="Strings.resx">
            <Generator>ResXFileCodeGenerator</Generator>
            <LastGenOutput>Strings.Designer.cs</LastGenOutput>
        </EmbeddedResource>
    </ItemGroup>

    <!-- TODO one target per bundle or one target for all bundles? will have to generalize webpack.config if one target per bundle. -->
    <!-- 
        Notes on BeforeTargets: DispatchToInnerBuilds only runs if we're multi-targeting. PreBuildEvent runs before builds for each framework. 
        If BeforeTargets contains only DispatchToInnerBuilds and we specify a framework when we call dotnet build, JavascriptBuild does not run.
        If BeforeTargets contains only PreBuildEvent and we multi-target, JavascriptBuild runs multiple times in parallel.
        So we must specify both. This way if we are multi-targeting, JavascriptBuild runs once, before DispatchToInnerBuilds after which inputs == outputs. 
        If we aren't multi-targeting, JavascriptBuild runs before PreBuildEvent.
    -->
    <Target Name="JavascriptBuildNonWindows" BeforeTargets="PreBuildEvent"  Inputs="@(JavascriptInputs)" Outputs="@(JavascriptOutputs)" Condition="'$(OS)' != 'Windows_NT'">
        <Yarn WorkingDirectory=".\Javascript" Command="run build --env.mode=$(Configuration) --env.entry=.\Servers\OutOfProcess\Http\HttpServer.ts" />
    </Target>

    <Target Name="JavascriptBuildWindows" BeforeTargets="DispatchToInnerBuilds"  Inputs="@(JavascriptInputs)" Outputs="@(JavascriptOutputs)" Condition="'$(OS)' == 'Windows_NT'">
        <Yarn WorkingDirectory=".\Javascript" Command="run build --env.mode=$(Configuration) --env.entry=.\Servers\OutOfProcess\Http\HttpServer.ts" />
    </Target>

</Project>
